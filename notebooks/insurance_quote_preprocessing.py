# -*- coding: utf-8 -*-
"""Insurance Quote Preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QIDhhXZ21g_Z_fVNQkbPrzDcWNpO02Aa
"""

# Notebook for preprocessing the Insurance Quote data based on BMI Business rules
# Import the libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder

# Import the dataset
data = pd.read_csv('data/data.csv')
data.head()

# drop column names AppID and IssueDate as they are non value added
data.drop(['AppID', 'IssueDate'], axis='columns', inplace=True)

# Label Encoding the Gender column [Female: 0 and Male: 1]
encoder=LabelEncoder()
data.Ins_Gender=encoder.fit_transform(data.Ins_Gender)

def calculate_meters(Ht):
  '''
  Function for converting height into meters. 
  Height of applicant is in Ft with inches. The first digit refers to ft and following digits refers to inches
  Ex: 507 means 5 ft and 7 inches

  Parameters:
  Ht: Height in Feets and inches
  Return:
  meters: Output in meters
  '''
  feet = int(Ht[0:1]) # retreive height
  inches = int(Ht[1:2]) # retreive inches
  meters = (feet*12 + inches) * 0.0254 # convert to meters
  return meters

data['meters'] = data.apply(lambda row: calculate_meters(row['Ht'].astype(str)),axis=1)
data.drop(['Ht'], axis='columns', inplace=True)

# calculate BMI as per business rule. BMI = kg/(meter-suare)
data['Wt']=data['Wt']*0.453592 # convert applicant weight to kgs
data['BMI'] = round(data['Wt']/(data['meters']*data['meters']),2)

data

def calculate_quote(record):
  '''
  Function to calculate insurance quote based on the BMI Business Rules

  Parameters:
  record: input record from the dataframe

  Return:
  quote_class: quote_class as per BMI rules
  '''
  # retreive age, gender and bmi values
  age = record['Ins_Age']
  gender = record['Ins_Gender']
  bmi = record['BMI']

  # calcualte insurance quote based on BMI Business rules 
  if ((age >= 18 and age <=39) and (bmi < 17.49 or bmi >38.5)):
    quote_class = 1
  elif ((age >= 40 and age <=59) and (bmi < 18.49 or bmi >38.5)):
    quote_class = 2
  elif ((age >= 60) and (bmi < 18.49 or bmi >45.5)):
    quote_class = 3
  else:
    quote_class = 0 
  
  return quote_class

data['quote'] = data.apply(lambda row: calculate_quote(row),axis=1)

data

data.info()

# Save processed data dataframes to new CSV files
data.to_csv("data/quote.csv", index=False)